DELIMITER ||
DROP TRIGGER T_AP_AC_RANKING_SCORE;
CREATE TRIGGER T_AP_AC_RANKING_SCORE
AFTER UPDATE ON 
per_assess_paper_examinee_map
FOR EACH ROW 
BEGIN
  DECLARE V_CUR_RANKING_ID CHAR(36);
  DECLARE V_CUR_ORG_RANKING_ID CHAR(36);
  
  DECLARE V_MIN_FLAG_SCORE decimal(10,2);
  DECLARE V_MIN_FLAG_ORG_SCORE decimal(10,2);
  DECLARE V_CUR_RANKING_SCORE decimal(10,2);
  
  DECLARE V_MAX_RANKING INT;
  DECLARE V_MAX_ORG_RANKING INT;
  
  DECLARE V_ASSESS_PAPER_NAME VARCHAR(255);
  DECLARE V_ORG_NAME VARCHAR(255);
  DECLARE V_USER_NAME VARCHAR(255);
  
  IF  (NEW.STATUS=3 AND ((NEW.AUDIT_SCORE <> OLD.AUDIT_SCORE) OR (NEW.AUDIT_SCORE IS NOT NULL AND OLD.AUDIT_SCORE IS NULL))) THEN
          SELECT MAX(SCORE) INTO V_MIN_FLAG_SCORE FROM PER_EXAMINEE_RANKING PER WHERE PER.SCORE<= NEW.AUDIT_SCORE AND PER.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
          SELECT MAX(SCORE) INTO V_MIN_FLAG_ORG_SCORE FROM per_org_score_ranking POSR WHERE POSR.SCORE<= NEW.AUDIT_SCORE AND POSR.ORG_ID=NEW.DEPT_ID AND POSR.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
          SELECT ID, SCORE INTO V_CUR_RANKING_ID, V_CUR_RANKING_SCORE FROM PER_EXAMINEE_RANKING PER WHERE PER.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID AND PER.USER_ID=NEW.CREATOR_ID;
          SELECT ID INTO V_CUR_ORG_RANKING_ID FROM per_org_score_ranking POSR WHERE POSR.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID AND POSR.USER_ID=NEW.CREATOR_ID;

          IF V_CUR_RANKING_SCORE IS NULL THEN
            -- NEW ranking.
            SELECT NAME INTO V_ASSESS_PAPER_NAME FROM per_assess_paper PAP WHERE PAP.ID = NEW.ASSESS_PAPER_ID;
            SELECT NAME INTO V_ORG_NAME FROM yy_organization ORG WHERE ORG.ID = NEW.DEPT_ID;
            SELECT USER_NAME INTO V_USER_NAME FROM yy_user_info U WHERE U.USER_ID = NEW.CREATOR_ID;
            IF V_MIN_FLAG_SCORE IS NULL THEN
               SELECT COUNT(1)+1 INTO V_MAX_RANKING FROM PER_EXAMINEE_RANKING PER WHERE PER.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
               SELECT COUNT(1)+1 INTO V_MAX_ORG_RANKING FROM per_org_score_ranking POSR WHERE POSR.ORG_ID=NEW.DEPT_ID AND POSR.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
            ELSE
               SELECT COUNT(1)+1 INTO V_MAX_RANKING FROM PER_EXAMINEE_RANKING PER WHERE PER.SCORE> NEW.AUDIT_SCORE AND PER.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
               SELECT COUNT(1)+1 INTO V_MAX_ORG_RANKING FROM per_org_score_ranking POSR WHERE POSR.SCORE> NEW.AUDIT_SCORE AND POSR.ORG_ID=NEW.DEPT_ID AND POSR.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
               -- Update Total ranking,
               UPDATE PER_EXAMINEE_RANKING PER SET PER.TOTAL_RANKING=PER.TOTAL_RANKING+1 WHERE PER.SCORE<NEW.AUDIT_SCORE AND PER.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
               -- Update Org ranking.
               UPDATE PER_EXAMINEE_RANKING PER SET PER.ORG_RANKING=PER.ORG_RANKING+1 WHERE PER.SCORE<NEW.AUDIT_SCORE AND PER.ORG_ID=NEW.DEPT_ID AND PER.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
               -- Update Org ranking.
               UPDATE per_org_score_ranking POSR SET POSR.RANKING=POSR.RANKING+1 WHERE POSR.SCORE< NEW.AUDIT_SCORE AND POSR.ORG_ID=NEW.DEPT_ID AND POSR.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
            END IF;
            INSERT INTO PER_EXAMINEE_RANKING(ID,ASSESSPAPER_ID,ASSESSPAPER_NAME,ORG_ID,ORG_NAME,TITLE,USER_ID,USER_NAME,SCORE,TOTAL_RANKING,ORG_RANKING,LEVEL,MAKER,AUDITOR) VALUES (UUID(),
               NEW.ASSESS_PAPER_ID, V_ASSESS_PAPER_NAME, NEW.DEPT_ID, V_ORG_NAME, NEW.TITLE, NEW.CREATOR_ID, V_USER_NAME, NEW.AUDIT_SCORE, V_MAX_RANKING, V_MAX_ORG_RANKING, 1, NEW.MARKER, NEW.AUDITOR);
            INSERT INTO per_org_score_ranking(ID,ASSESSPAPER_ID,ORG_ID,SCORE,RANKING, USER_ID) VALUES(UUID(), NEW.ASSESS_PAPER_ID, NEW.DEPT_ID, NEW.AUDIT_SCORE, V_MAX_ORG_RANKING, NEW.CREATOR_ID);
          ELSE
            -- Update Existing ranking.
            -- Re-Order without the current user's ranking.
            UPDATE PER_EXAMINEE_RANKING PER SET PER.TOTAL_RANKING=PER.TOTAL_RANKING-1 WHERE PER.SCORE<V_CUR_RANKING_SCORE AND PER.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
            UPDATE PER_EXAMINEE_RANKING PER SET PER.ORG_RANKING=PER.ORG_RANKING-1 WHERE PER.SCORE<V_CUR_RANKING_SCORE AND PER.ORG_ID=NEW.DEPT_ID AND PER.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
            UPDATE per_org_score_ranking POSR SET POSR.RANKING=POSR.RANKING-1 WHERE POSR.SCORE<V_CUR_RANKING_SCORE AND POSR.ORG_ID=NEW.DEPT_ID AND POSR.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
            -- Get the new ranking for the current user.
            SELECT COUNT(1)+1 INTO V_MAX_RANKING FROM PER_EXAMINEE_RANKING PER WHERE PER.SCORE> NEW.AUDIT_SCORE AND PER.ID <> V_CUR_RANKING_ID AND PER.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
            SELECT COUNT(1)+1 INTO V_MAX_ORG_RANKING FROM per_org_score_ranking POSR WHERE POSR.SCORE> NEW.AUDIT_SCORE AND POSR.ID <> V_CUR_ORG_RANKING_ID AND POSR.ORG_ID=NEW.DEPT_ID AND POSR.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;

            -- Update the current user's ranking (Total ranking and org ranking.)
            UPDATE PER_EXAMINEE_RANKING PER SET PER.SCORE=NEW.AUDIT_SCORE, PER.TOTAL_RANKING=V_MAX_RANKING, PER.ORG_RANKING=V_MAX_ORG_RANKING WHERE PER.ID=V_CUR_RANKING_ID;
            UPDATE per_org_score_ranking POSR SET POSR.SCORE=NEW.AUDIT_SCORE, POSR.RANKING=V_MAX_ORG_RANKING WHERE POSR.ID=V_CUR_ORG_RANKING_ID;

            -- Update the min < current user' rankings
            UPDATE PER_EXAMINEE_RANKING PER SET PER.TOTAL_RANKING=PER.TOTAL_RANKING+1 WHERE PER.SCORE<NEW.AUDIT_SCORE AND PER.ID <> V_CUR_RANKING_ID AND PER.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
            UPDATE PER_EXAMINEE_RANKING PER SET PER.ORG_RANKING=PER.ORG_RANKING+1 WHERE PER.SCORE<NEW.AUDIT_SCORE AND PER.ID <> V_CUR_RANKING_ID AND PER.ORG_ID=NEW.DEPT_ID AND PER.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
            UPDATE per_org_score_ranking POSR SET POSR.RANKING=POSR.RANKING+1 WHERE POSR.SCORE< NEW.AUDIT_SCORE AND POSR.ID <> V_CUR_ORG_RANKING_ID AND POSR.ORG_ID=NEW.DEPT_ID AND POSR.ASSESSPAPER_ID=NEW.ASSESS_PAPER_ID;
        
          END IF;
  END IF;
END
||
DELIMITER ;